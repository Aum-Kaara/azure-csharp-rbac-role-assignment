{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "calabsync"
    },
    "networkInterfaceName": {
      "type": "string",
      "defaultValue": "lab-ni"
    },
    "networkSecurityGroupName": {
      "type": "string",
      "defaultValue": "lab-nsg"
    },
    "networkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [
        {
          "name": "RDP",
          "properties": {
            "priority": 300,
            "protocol": "TCP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "3389"
          }
        }
      ]
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default"
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "lab-vnet"
    },
    "addressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/24"
      ]
    },
    "subnets": {
      "type": "array",
      "defaultValue": [
        {
          "name": "default",
          "properties": {
            "addressPrefix": "10.0.0.0/24"
          }
        }
      ]
    },
    "publicIpAddressName": {
      "type": "string",
      "defaultValue": "lab-ip"
    },
    "publicIpAddressType": {
      "type": "string",
      "defaultValue": "Dynamic"
    },
    "publicIpAddressSku": {
      "type": "string",
      "defaultValue": "Basic"
    },
    "virtualMachineNames": {
      "type": "array",
      "defaultValue": [
        "ca-lab-vm",
        "syncee"
      ]
    },
    "osDiskType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS"
    },
    "dataDisks": {
      "type": "array",
      "defaultValue": [
        {
          "lun": 0,
          "createOption": "attach",
          "caching": "None",
          "writeAcceleratorEnabled": false,
          "id": null,
          "name": "Lab_DataDisk_0",
          "storageAccountType": null
        },
        {
          "lun": 0,
          "createOption": "attach",
          "caching": "None",
          "writeAcceleratorEnabled": false,
          "id": null,
          "name": "Lab_DataDisk_1",
          "storageAccountType": null
        }
      ]
    },
    "dataDiskResources": {
      "type": "array",
      "defaultValue": [
        {
          "name": "Lab_DataDisk_0",
          "diskSizeGB": 4,
          "sku": "StandardSSD_LRS",
          "creationData": {
            "createOption": "empty"
          }
        },
        {
          "name": "Lab_DataDisk_1",
          "diskSizeGB": 4,
          "sku": "StandardSSD_LRS",
          "creationData": {
            "createOption": "empty"
          }
        }
      ]
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_B1ms"
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "student"
    },
    "adminPassword": {
      "type": "string",
      "defaultValue": "1Cloud_Academy_Labs!"
    },
    "newTier": {
      "type": "string",
      "defaultValue": "Consumption"
    },
    "appName": {
      "type": "string",
      "defaultValue": "[concat('cafnappsp', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "defaultValue": "Basic",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "workerSize": {
      "type": "string",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0",
      "metadata": {
        "description": "The instance size of the hosting plan (small, medium, or large)."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "projectDirectory": {
      "type": "string",
      "defaultValue": "PublishOutput",
      "metadata": {
        "description": "The directory to start searching for the function if not in the repository's root."
      }
    },
    "repoURL": {
      "type": "string",
      "defaultValue": "https://github.com/lrakai/azure-csharp-rbac-role-assignment.git",
      "metadata": {
        "description": "The URL for the GitHub repository that contains the project to deploy."
      }
    },
    "branch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "The branch of the GitHub repository to use."
      }
    },
    "clientId": {
      "type": "securestring"
    },
    "secretName": {
      "type": "securestring"
    },
    "secret": {
      "type": "securestring"
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[concat('a', uniquestring(resourceGroup().id), 'kv')]"
    }
  },
  "variables": {
    "storageAccountName": "[replace(concat(parameters('storageAccountName'), resourceGroup().name),'-', '')]",
    "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
    "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]",
    "functionAppName": "[parameters('appName')]",
    "hostingPlanName": "[concat(parameters('appName'), '-plan')]",
    "fnStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'functions')]",
    "identityResourceId": "[concat(resourceId('Microsoft.Web/sites', variables('functionAppName')),'/providers/Microsoft.ManagedIdentity/Identities/default')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "tags": {
        "Environment": "Dev"
      }
    },
    {
      "name": "[parameters('networkSecurityGroupName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[parameters('networkSecurityGroupRules')]"
      },
      "tags": {
        "Environment": "Dev"
      }
    },
    {
      "name": "[parameters('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "subnets": "[parameters('subnets')]"
      },
      "tags": {
        "Environment": "Dev"
      }
    },
    {
      "name": "[concat(parameters('networkInterfaceName'), '-', string(copyIndex()))]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-04-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'), '-', string(copyIndex()))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', concat(parameters('publicIpAddressName'), '-', string(copyIndex())))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      },
      "tags": {
        "Environment": "Dev"
      },
      "copy": {
        "name": "ni-copy",
        "count": 2
      }
    },
    {
      "name": "[concat(parameters('publicIpAddressName'), '-', string(copyIndex()))]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
      },
      "sku": {
        "name": "[parameters('publicIpAddressSku')]"
      },
      "tags": {
        "Environment": "Dev"
      },
      "copy": {
        "name": "pip-copy",
        "count": 2
      }
    },
    {
      "name": "[parameters('dataDiskResources')[copyIndex()].name]",
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2018-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "diskSizeGB": "[parameters('dataDiskResources')[copyIndex()].diskSizeGB]",
        "creationData": "[parameters('dataDiskResources')[copyIndex()].creationData]"
      },
      "sku": {
        "name": "[parameters('dataDiskResources')[copyIndex()].sku]"
      },
      "copy": {
        "name": "managedDiskResources",
        "count": "[length(parameters('dataDiskResources'))]"
      },
      "tags": {
        "Environment": "Dev"
      }
    },
    {
      "name": "[parameters('virtualMachineNames')[0]]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "managedDiskResources",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'), '-0')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('osDiskType')]"
            }
          },
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": 1,
              "input": {
                "lun": "[parameters('dataDisks')[0].lun]",
                "createOption": "[parameters('dataDisks')[0].createOption]",
                "caching": "[parameters('dataDisks')[0].caching]",
                "writeAcceleratorEnabled": "[parameters('dataDisks')[0].writeAcceleratorEnabled]",
                "managedDisk": {
                  "id": "[coalesce(parameters('dataDisks')[0].id, if(equals(parameters('dataDisks')[0].name, json('null')), json('null'), resourceId('Microsoft.Compute/disks', parameters('dataDisks')[0].name)))]",
                  "storageAccountType": "[parameters('dataDisks')[0].storageAccountType]"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('networkInterfaceName'), '-0'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('virtualMachineNames')[0]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": false,
            "provisionVmAgent": true
          }
        }
      },
      "tags": {
        "Environment": "Dev"
      }
    },
    {
      "name": "[parameters('virtualMachineNames')[1]]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-06-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "managedDiskResources",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'), '-1')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('osDiskType')]"
            }
          },
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": 1,
              "input": {
                "lun": "[parameters('dataDisks')[1].lun]",
                "createOption": "[parameters('dataDisks')[1].createOption]",
                "caching": "[parameters('dataDisks')[1].caching]",
                "writeAcceleratorEnabled": "[parameters('dataDisks')[1].writeAcceleratorEnabled]",
                "managedDisk": {
                  "id": "[coalesce(parameters('dataDisks')[1].id, if(equals(parameters('dataDisks')[1].name, json('null')), json('null'), resourceId('Microsoft.Compute/disks', parameters('dataDisks')[1].name)))]",
                  "storageAccountType": "[parameters('dataDisks')[1].storageAccountType]"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('networkInterfaceName'), '-1'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('virtualMachineNames')[1]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": false,
            "provisionVmAgent": true
          }
        }
      },
      "tags": {
        "Environment": "Dev"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('fnStorageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "sku": "[parameters('sku')]",
        "workerSize": "[parameters('workerSize')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
      }
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('fnStorageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('fnStorageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('fnStorageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('fnStorageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "Project",
              "value": "[parameters('projectDirectory')]"
            },
            {
              "name": "StorageAccountName",
              "value": "[variables('StorageAccountName')]"
            },
            {
              "name": "tenantId",
              "value": "[subscription().tenantId]"
            },
            {
              "name": "clientId",
              "value": "[parameters('clientId')]"
            },
            {
              "name": "vaultName",
              "value": "[parameters('keyVaultName')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('fnStorageAccountName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('repoURL')]",
            "branch": "[parameters('branch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2015-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
            "objectId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list",
                "delete",
                "purge"
              ]
            }
          }
        ],
        "enabledForDeployment": false
      },
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', variables('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('secretName'))]",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[parameters('secret')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ]
    }
  ]
}